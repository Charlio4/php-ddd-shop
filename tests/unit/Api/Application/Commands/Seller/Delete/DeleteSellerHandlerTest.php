<?php

declare(strict_types=1);

namespace unit\Api\Application\Commands\Seller\Delete;

use Api\Application\Commands\Seller\Delete\DeleteSellerCommand;
use Api\Application\Commands\Seller\Delete\DeleteSellerHandler;
use Api\Domain\Entity\Seller;
use Api\Domain\Exceptions\SellerException;
use Api\Domain\Service\EntityFinder\SellerFinderInterface;
use Mockery;
use Mockery\LegacyMockInterface;
use Mockery\MockInterface;
use PHPUnit\Framework\TestCase;
use Ramsey\Uuid\Uuid;

class DeleteSellerHandlerTest extends TestCase
{
    /** @var SellerFinderInterface|LegacyMockInterface|MockInterface */
    private $sellerFinder;

    /** @var Seller|LegacyMockInterface|MockInterface */
    private $seller;


    protected function setUp(): void
    {
        $this->sellerFinder = Mockery::mock(SellerFinderInterface::class);
        $this->seller       = Mockery::mock(Seller::class);

        parent::setUp(); // TODO: Change the autogenerated stub
    }


    /**
     * @test
     * @dataProvider sellerProvider
     * @param string $uuid
     */
    public function should_delete_seller(string $uuid)
    {
        $this->sellerFinder
            ->shouldReceive('getSellerByUuid')
            ->once()
            ->andReturn($this->seller);

        $this->seller
            ->shouldReceive('deleteSeller')
            ->once()
            ->andReturnSelf();

        $command = new DeleteSellerCommand($uuid);
        $handler = new DeleteSellerHandler($this->sellerFinder);

        $result = $handler($command);

        self::assertTrue($result);
    }


    /**
     * @test
     * @dataProvider sellerProvider
     * @param string $uuid
     */
    public function should_throw_exception_when_seller_not_found(string $uuid)
    {
        $this->expectException(SellerException::class);
        $this->sellerFinder
            ->shouldReceive('getSellerByUuid')
            ->once()
            ->andReturn(null);

        $command = new DeleteSellerCommand($uuid);
        $handler = new DeleteSellerHandler($this->sellerFinder);

        $handler($command);
    }


    public function sellerProvider()
    {
        return [
            [Uuid::uuid4()->toString()],
        ];
    }
}
