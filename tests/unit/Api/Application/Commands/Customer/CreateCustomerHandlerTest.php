<?php

declare(strict_types=1);

namespace unit\Api\Application\Commands\Customer;

use Api\Application\Commands\Customer\CreateCustomerCommand;
use Api\Application\Commands\Customer\CreateCustomerHandler;
use Api\Domain\Common\WriteModelInterface;
use Mockery;
use Mockery\LegacyMockInterface;
use Mockery\MockInterface;
use PHPUnit\Framework\TestCase;

class CreateCustomerHandlerTest extends TestCase
{
    /** @var WriteModelInterface|LegacyMockInterface|MockInterface */
    private $writeModel;


    protected function setUp(): void
    {
        $this->writeModel = Mockery::mock(WriteModelInterface::class);

        parent::setUp(); // TODO: Change the autogenerated stub
    }


    /**
     * @test
     * @dataProvider customerProvider
     * @param string $firstname
     * @param string $lastname
     */
    public function should_create_customer(string $firstname, string $lastname)
    {
        $this->writeModel
            ->shouldReceive('save')
            ->once()
            ->andReturnNull();

        $command = new CreateCustomerCommand($firstname, $lastname);
        $handler = new CreateCustomerHandler($this->writeModel);

        $result = $handler($command);

        self::assertIsString($result);
    }


    public function customerProvider()
    {
        return [
            ['Carlos', 'Su√°rez'],
        ];
    }
}
