<?php

declare(strict_types=1);

namespace unit\Api\Application\Commands\Product\Delete;

use Api\Application\Commands\Product\Delete\DeleteProductCommand;
use Api\Application\Commands\Product\Delete\DeleteProductHandler;
use Api\Domain\Entity\Product;
use Api\Domain\Exceptions\ProductException;
use Api\Domain\Service\EntityFinder\ProductFinderInterface;
use Mockery;
use PHPUnit\Framework\TestCase;
use Ramsey\Uuid\Uuid;

class DeleteProductHandlerTest extends TestCase
{
    /** @var ProductFinderInterface|Mockery\LegacyMockInterface|Mockery\MockInterface */
    private $productFinder;

    /** @var Product|Mockery\LegacyMockInterface|Mockery\MockInterface */
    private $product;


    protected function setUp(): void
    {
        $this->productFinder = Mockery::mock(ProductFinderInterface::class);
        $this->product       = Mockery::mock(Product::class);

        parent::setUp(); // TODO: Change the autogenerated stub
    }


    /**
     * @test
     * @dataProvider productProvider
     * @param string $uuid
     */
    public function should_delete_product(string $uuid)
    {
        $this->productFinder
            ->shouldReceive('getProductByUuid')
            ->once()
            ->andReturn($this->product);

        $this->product
            ->shouldReceive('deleteProduct')
            ->once()
            ->andReturnSelf();

        $command = new DeleteProductCommand($uuid);
        $handler = new DeleteProductHandler($this->productFinder);

        $result = $handler($command);

        self::assertTrue($result);
    }


    /**
     * @test
     * @dataProvider productProvider
     * @param string $uuid
     */
    public function should_throw_exception_when_product_not_found(string $uuid)
    {
        $this->expectException(ProductException::class);

        $this->productFinder
            ->shouldReceive('getProductByUuid')
            ->once()
            ->andReturnNull();

        $command = new DeleteProductCommand($uuid);
        $handler = new DeleteProductHandler($this->productFinder);

        $handler($command);
    }

    public function productProvider()
    {
        return [
            [Uuid::uuid4()->toString()],
        ];
    }
}
