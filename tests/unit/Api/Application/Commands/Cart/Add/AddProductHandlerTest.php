<?php

declare(strict_types=1);

namespace unit\Api\Application\Commands\Cart\Add;

use Api\Application\Commands\Cart\Add\AddProductCommand;
use Api\Application\Commands\Cart\Add\AddProductHandler;
use Api\Domain\Common\WriteModelInterface;
use Api\Domain\Entity\Cart;
use Api\Domain\Entity\Product;
use Api\Domain\Exceptions\ProductException;
use Api\Domain\Service\EntityFinder\CartFinderInterface;
use Api\Domain\Service\EntityFinder\ProductFinderInterface;
use Api\Domain\ValueObj\Product\ProductPrice;
use Api\Domain\ValueObj\Product\ProductQuantity;
use Mockery;
use Mockery\LegacyMockInterface;
use Mockery\MockInterface;
use PHPUnit\Framework\TestCase;
use Ramsey\Uuid\Uuid;

class AddProductHandlerTest extends TestCase
{
    /** @var WriteModelInterface|LegacyMockInterface|MockInterface */
    private $writeModel;

    /** @var ProductFinderInterface|LegacyMockInterface|MockInterface */
    private $productFinder;

    /** @var CartFinderInterface|LegacyMockInterface|MockInterface */
    private $cartFinder;

    /** @var Product|LegacyMockInterface|MockInterface */
    private $product;

    /** @var Cart|LegacyMockInterface|MockInterface */
    private $cart;


    protected function setUp(): void
    {
        $this->writeModel    = Mockery::mock(WriteModelInterface::class);
        $this->productFinder = Mockery::mock(ProductFinderInterface::class);
        $this->cartFinder    = Mockery::mock(CartFinderInterface::class);

        $this->product = Mockery::mock(Product::class);
        $this->cart    = Mockery::mock(Cart::class);

        parent::setUp(); // TODO: Change the autogenerated stub
    }


    /**
     * @test
     * @dataProvider productProvider
     * @param string $customerUuid
     * @param string $productUuid
     * @param int $quantity
     * @throws \Throwable
     */
    public function should_add_product_to_cart(
        string $customerUuid,
        string $productUuid,
        int $quantity
    ) {
        $this->productFinder
            ->shouldReceive('getProductByUuid')
            ->once()
            ->andReturn($this->product);

        $this->cartFinder
            ->shouldReceive('getCartByCustomerAndProduct')
            ->once()
            ->andReturnNull();

        $this->product
            ->shouldReceive('getPrice')
            ->once()
            ->andReturn(ProductPrice::fromNumber(10));

        $this->cart
            ->shouldReceive('setStatusInProgress')
            ->once()
            ->andReturnSelf();

        $this->writeModel
            ->shouldReceive('save')
            ->once()
            ->andReturnNull();

        $command = new AddProductCommand($customerUuid, $productUuid, $quantity);
        $handler = new AddProductHandler($this->writeModel, $this->productFinder, $this->cartFinder);

        $result = $handler($command);

        self::assertTrue($result);
    }


    /**
     * @test
     * @dataProvider productProvider
     * @param string $customerUuid
     * @param string $productUuid
     * @param int $quantity
     * @throws \Throwable
     */
    public function should_update_product_cart(
        string $customerUuid,
        string $productUuid,
        int $quantity
    ) {
        $this->productFinder
            ->shouldReceive('getProductByUuid')
            ->once()
            ->andReturn($this->product);

        $this->cartFinder
            ->shouldReceive('getCartByCustomerAndProduct')
            ->once()
            ->andReturn($this->cart);

        $this->cart
            ->shouldReceive('increaseQuantity')
            ->once()
            ->andReturnSelf();

        $this->cart
            ->shouldReceive('getQuantity')
            ->once()
            ->andReturn(ProductQuantity::fromInt(3));

        $this->product
            ->shouldReceive('getPrice')
            ->once()
            ->andReturn(ProductPrice::fromNumber(10));

        $this->cart
            ->shouldReceive('setAmount')
            ->once()
            ->andReturnSelf();

        $this->writeModel
            ->shouldReceive('update')
            ->once()
            ->andReturnNull();

        $command = new AddProductCommand($customerUuid, $productUuid, $quantity);
        $handler = new AddProductHandler($this->writeModel, $this->productFinder, $this->cartFinder);

        $result = $handler($command);

        self::assertTrue($result);
    }


    /**
     * @test
     * @dataProvider productProvider
     * @param string $customerUuid
     * @param string $productUuid
     * @param int $quantity
     * @throws \Throwable
     */
    public function should_throw_exception_when_product_not_found(
        string $customerUuid,
        string $productUuid,
        int $quantity
    ) {
        $this->expectException(ProductException::class);

        $this->productFinder
            ->shouldReceive('getProductByUuid')
            ->once()
            ->andReturnNull();

        $command = new AddProductCommand($customerUuid, $productUuid, $quantity);
        $handler = new AddProductHandler($this->writeModel, $this->productFinder, $this->cartFinder);

        $handler($command);
    }


    public function productProvider()
    {
        return [
            [
                Uuid::uuid4()->toString(),
                Uuid::uuid4()->toString(),
                4,
            ],
        ];
    }
}
