<?php

declare(strict_types=1);

namespace unit\Api\Application\Commands\Cart\GetTotal;

use Api\Application\Commands\Cart\GetTotal\GetTotalCartCommand;
use Api\Application\Commands\Cart\GetTotal\GetTotalCartHandler;
use Api\Domain\Entity\Cart;
use Api\Domain\Exceptions\CartException;
use Api\Domain\Service\EntityFinder\CartFinderInterface;
use Api\Domain\ValueObj\Cart\CartAmount;
use Mockery;
use Mockery\LegacyMockInterface;
use Mockery\MockInterface;
use PHPUnit\Framework\TestCase;
use Ramsey\Uuid\Uuid;

class GetTotalCartHandlerTest extends TestCase
{
    /** @var CartFinderInterface|LegacyMockInterface|MockInterface */
    private $cartFinder;

    /** @var Cart|LegacyMockInterface|MockInterface */
    private $cart;


    protected function setUp(): void
    {
        $this->cartFinder = Mockery::mock(CartFinderInterface::class);
        $this->cart       = Mockery::mock(Cart::class);

        parent::setUp(); // TODO: Change the autogenerated stub
    }


    /**
     * @test
     * @dataProvider customerProvider
     * @param string $customerUuid
     */
    public function should_return_total_cart(string $customerUuid)
    {
        $this->cartFinder
            ->shouldReceive('getCartsByCustomerAndStatusInProgress')
            ->once()
            ->andReturn([$this->cart]);

        $this->cart
            ->shouldReceive('getAmount')
            ->once()
            ->andReturn(CartAmount::fromNumber(49.95));

        $command = new GetTotalCartCommand($customerUuid);
        $handler = new GetTotalCartHandler($this->cartFinder);

        $result = $handler($command);

        self::assertIsFloat($result);
    }

    /**
     * @test
     * @dataProvider customerProvider
     * @param string $customerUuid
     */
    public function should_throw_exception_when_cart_not_found(string $customerUuid)
    {
        $this->expectException(CartException::class);

        $this->cartFinder
            ->shouldReceive('getCartsByCustomerAndStatusInProgress')
            ->once()
            ->andReturn([]);

        $command = new GetTotalCartCommand($customerUuid);
        $handler = new GetTotalCartHandler($this->cartFinder);

        $handler($command);
    }


    public function customerProvider()
    {
        return [
            [Uuid::uuid4()->toString()],
        ];
    }
}
