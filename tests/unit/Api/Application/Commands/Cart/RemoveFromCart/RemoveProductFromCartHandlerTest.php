<?php

declare(strict_types=1);

namespace unit\Api\Application\Commands\Cart\RemoveFromCart;

use Api\Application\Commands\Cart\RemoveFromCart\RemoveProductFromCartCommand;
use Api\Application\Commands\Cart\RemoveFromCart\RemoveProductFromCartHandler;
use Api\Domain\Common\WriteModelInterface;
use Api\Domain\Entity\Cart;
use Api\Domain\Entity\Product;
use Api\Domain\Exceptions\CartException;
use Api\Domain\Exceptions\ProductException;
use Api\Domain\Service\EntityFinder\CartFinderInterface;
use Api\Domain\Service\EntityFinder\ProductFinderInterface;
use Api\Domain\ValueObj\Product\ProductPrice;
use Mockery;
use Mockery\LegacyMockInterface;
use Mockery\MockInterface;
use PHPUnit\Framework\TestCase;
use Ramsey\Uuid\Uuid;
use Throwable;

class RemoveProductFromCartHandlerTest extends TestCase
{
    /** @var WriteModelInterface|LegacyMockInterface|MockInterface */
    private $writeModel;

    /** @var ProductFinderInterface|LegacyMockInterface|MockInterface */
    private $productFinder;

    /** @var CartFinderInterface|LegacyMockInterface|MockInterface */
    private $cartFinder;

    /** @var Cart|LegacyMockInterface|MockInterface */
    private $cart;

    /** @var Product|LegacyMockInterface|MockInterface */
    private $product;


    protected function setUp(): void
    {
        $this->writeModel    = Mockery::mock(WriteModelInterface::class);
        $this->productFinder = Mockery::mock(ProductFinderInterface::class);
        $this->cartFinder    = Mockery::mock(CartFinderInterface::class);

        $this->cart    = Mockery::mock(Cart::class);
        $this->product = Mockery::mock(Product::class);

        parent::setUp(); // TODO: Change the autogenerated stub
    }


    /**
     * @test
     * @dataProvider dataProvider
     * @param string $customerUuid
     * @param string $productUuid
     * @param int $quantity
     * @throws Throwable
     */
    public function should_update_product_from_cart(string $customerUuid, string $productUuid, int $quantity)
    {
        $this->productFinder
            ->shouldReceive('getProductByUuid')
            ->once()
            ->andReturn($this->product);

        $this->cartFinder
            ->shouldReceive('getCartByCustomerAndProduct')
            ->once()
            ->andReturn($this->cart);

        $this->cart
            ->shouldReceive('setProduct')
            ->once()
            ->andReturnSelf();

        $this->cart
            ->shouldReceive('decreaseQuantity')
            ->once()
            ->andReturnSelf();

        $this->product
            ->shouldReceive('getPrice')
            ->once()
            ->andReturn(ProductPrice::fromNumber(4.95));

        $this->cart
            ->shouldReceive('quantityIsZero')
            ->once()
            ->andReturnFalse();

        $this->cart
            ->shouldReceive('updateProductFromCart')
            ->once()
            ->andReturnNull();

        $command = new RemoveProductFromCartCommand(
            $customerUuid,
            $productUuid,
            $quantity
        );

        $handler = new RemoveProductFromCartHandler(
            $this->writeModel,
            $this->productFinder,
            $this->cartFinder
        );

        $result = $handler($command);

        self::assertTrue($result);
    }


    /**
     * @test
     * @dataProvider dataProvider
     * @param string $customerUuid
     * @param string $productUuid
     * @param int $quantity
     * @throws Throwable
     */
    public function should_remove_product_from_cart(string $customerUuid, string $productUuid, int $quantity)
    {
        $this->productFinder
            ->shouldReceive('getProductByUuid')
            ->once()
            ->andReturn($this->product);

        $this->cartFinder
            ->shouldReceive('getCartByCustomerAndProduct')
            ->once()
            ->andReturn($this->cart);

        $this->cart
            ->shouldReceive('setProduct')
            ->once()
            ->andReturnSelf();

        $this->cart
            ->shouldReceive('decreaseQuantity')
            ->once()
            ->andReturnSelf();

        $this->product
            ->shouldReceive('getPrice')
            ->once()
            ->andReturn(ProductPrice::fromNumber(4.95));

        $this->cart
            ->shouldReceive('quantityIsZero')
            ->once()
            ->andReturnTrue();

        $this->cart
            ->shouldReceive('removeProductFromCart')
            ->once()
            ->andReturnSelf();

        $command = new RemoveProductFromCartCommand(
            $customerUuid,
            $productUuid,
            $quantity
        );

        $handler = new RemoveProductFromCartHandler(
            $this->writeModel,
            $this->productFinder,
            $this->cartFinder
        );

        $result = $handler($command);

        self::assertTrue($result);
    }


    /**
     * @test
     * @dataProvider dataProvider
     * @param string $customerUuid
     * @param string $productUuid
     * @param int $quantity
     * @throws Throwable
     */
    public function should_throw_exception_when_product_not_found(
        string $customerUuid,
        string $productUuid,
        int $quantity
    ) {
        $this->expectException(ProductException::class);

        $this->productFinder
            ->shouldReceive('getProductByUuid')
            ->once()
            ->andReturn();

        $command = new RemoveProductFromCartCommand(
            $customerUuid,
            $productUuid,
            $quantity
        );

        $handler = new RemoveProductFromCartHandler(
            $this->writeModel,
            $this->productFinder,
            $this->cartFinder
        );

        $handler($command);
    }


    /**
     * @test
     * @dataProvider dataProvider
     * @param string $customerUuid
     * @param string $productUuid
     * @param int $quantity
     * @throws Throwable
     */
    public function should_throw_exception_when_cart_not_found(
        string $customerUuid,
        string $productUuid,
        int $quantity
    ) {
        $this->expectException(CartException::class);

        $this->productFinder
            ->shouldReceive('getProductByUuid')
            ->once()
            ->andReturn($this->product);

        $this->cartFinder
            ->shouldReceive('getCartByCustomerAndProduct')
            ->once()
            ->andReturnNull();

        $command = new RemoveProductFromCartCommand(
            $customerUuid,
            $productUuid,
            $quantity
        );

        $handler = new RemoveProductFromCartHandler(
            $this->writeModel,
            $this->productFinder,
            $this->cartFinder
        );

        $handler($command);
    }


    public function dataProvider()
    {
        return [
            [
                Uuid::uuid4()->toString(),
                Uuid::uuid4()->toString(),
                1,
            ],
        ];
    }
}
