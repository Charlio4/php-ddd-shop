<?php

declare(strict_types=1);

namespace unit\Api\Application\Commands\Cart\Delete;

use Api\Application\Commands\Cart\Delete\DeleteCartCommand;
use Api\Application\Commands\Cart\Delete\DeleteCartHandler;
use Api\Domain\Common\WriteModelInterface;
use Api\Domain\Entity\Cart;
use Api\Domain\Exceptions\CartException;
use Api\Domain\Service\EntityFinder\CartFinderInterface;
use Mockery;
use Mockery\LegacyMockInterface;
use Mockery\MockInterface;
use PHPUnit\Framework\TestCase;
use Ramsey\Uuid\Uuid;

class DeleteCartHandlerTest extends TestCase
{
    /** @var WriteModelInterface|LegacyMockInterface|MockInterface */
    private $writeModel;

    /** @var CartFinderInterface|LegacyMockInterface|MockInterface */
    private $cartFinder;

    /** @var Cart|LegacyMockInterface|MockInterface */
    private $cart;


    protected function setUp(): void
    {
        $this->writeModel = Mockery::mock(WriteModelInterface::class);
        $this->cartFinder = Mockery::mock(CartFinderInterface::class);
        $this->cart       = Mockery::mock(Cart::class);

        parent::setUp(); // TODO: Change the autogenerated stub
    }


    /**
     * @test
     * @dataProvider customerProvider
     * @param string $customerUuid
     */
    public function should_delete_cart(string $customerUuid)
    {
        $this->cartFinder
            ->shouldReceive('getCartsByCustomer')
            ->once()
            ->andReturn([$this->cart]);

        $this->writeModel
            ->shouldReceive('delete')
            ->once()
            ->andReturnNull();

        $command = new DeleteCartCommand($customerUuid);
        $handler = new DeleteCartHandler($this->writeModel, $this->cartFinder);

        $result = $handler($command);

        self::assertTrue($result);
    }


    /**
     * @test
     * @dataProvider customerProvider
     * @param string $customerUuid
     */
    public function should_throw_exception_when_cart_not_founded(string $customerUuid)
    {
        $this->expectException(CartException::class);

        $this->cartFinder
            ->shouldReceive('getCartsByCustomer')
            ->once()
            ->andReturn([]);

        $command = new DeleteCartCommand($customerUuid);
        $handler = new DeleteCartHandler($this->writeModel, $this->cartFinder);

        $handler($command);
    }

    public function customerProvider()
    {
        return [
            [Uuid::uuid4()->toString()],
        ];
    }
}
