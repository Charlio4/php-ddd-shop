<?php

declare(strict_types=1);

namespace Api\UI\Console\Customer\Create;

use Api\Application\Commands\Customer\CreateCustomerCommand;
use Api\Domain\Common\Param;
use Api\Domain\Events\Bus\ConsumerMessageInterface;
use Api\Infrastructure\Console\CliCommand;
use Closure;
use Exception;
use League\Tactician\CommandBus;
use PhpAmqpLib\Message\AMQPMessage;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

final class ConsumerCreateCustomerCommand extends CliCommand
{
    private ConsumerMessageInterface $consumer;

    private CommandBus $commandBus;


    public function __construct(
        ConsumerMessageInterface $consumer,
        CommandBus $commandBus
    ) {
        $this->consumer   = $consumer;
        $this->commandBus = $commandBus;

        parent::__construct();
    }


    protected function configure()
    {
        $this
            ->setName('rabbit:consumer:create-customer')
            ->setDescription('Consumer "create-customer" RabbitMQ queue');

        parent::configure(); // TODO: Change the autogenerated stub
    }


    /**
     * {@inheritdoc}
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $this->consumer->listenQueue(
            $this->buildCallback()
        );
    }


    /**
     * @return Closure
     */
    protected function buildCallback(): Closure
    {
        $logger = $this->logger;

        return
            function (AMQPMessage $msg) use ($logger) {
                $logger->info('Lister message: ' . $msg->getBody());

                $customer = json_decode($msg->getBody(), true);

                try {
                    $command = new CreateCustomerCommand(
                        $customer[Param::CUSTOMER_FIRSTNAME],
                        $customer[Param::CUSTOMER_LASTNAME]
                    );

                    $customerUuid = $this->commandBus->handle($command);

                    $logger->info('Message consumed:' . json_encode($customer));

                    echo json_encode(['customer_uuid' => $customerUuid]);
                } catch (Exception $e) {
                    $logger->error('Error to consumer message ' . $customer['uuid']);
                }
            };
    }
}
